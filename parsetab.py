
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "DIVIDE EQUALS IDENTIFIER INT MINUS NUMBER PLUS PRINT STR STRING TIMESstatement_list : statement\n                      | statement statement_liststatement : INT IDENTIFIER EQUALS expression\n                 | STR IDENTIFIER EQUALS STRINGstatement : IDENTIFIER EQUALS expressionstatement : PRINT expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : '(' expression ')' expression : NUMBERexpression : IDENTIFIER"
    
_lr_action_items = {'INT':([0,2,11,13,14,16,23,24,25,26,27,28,29,],[3,3,-6,-12,-13,-5,-3,-4,-7,-8,-9,-10,-11,]),'STR':([0,2,11,13,14,16,23,24,25,26,27,28,29,],[5,5,-6,-12,-13,-5,-3,-4,-7,-8,-9,-10,-11,]),'IDENTIFIER':([0,2,3,5,6,9,11,12,13,14,15,16,18,19,20,21,23,24,25,26,27,28,29,],[4,4,8,10,14,14,-6,14,-12,-13,14,-5,14,14,14,14,-3,-4,-7,-8,-9,-10,-11,]),'PRINT':([0,2,11,13,14,16,23,24,25,26,27,28,29,],[6,6,-6,-12,-13,-5,-3,-4,-7,-8,-9,-10,-11,]),'$end':([1,2,7,11,13,14,16,23,24,25,26,27,28,29,],[0,-1,-2,-6,-12,-13,-5,-3,-4,-7,-8,-9,-10,-11,]),'EQUALS':([4,8,10,],[9,15,17,]),'(':([6,9,12,15,18,19,20,21,],[12,12,12,12,12,12,12,12,]),'NUMBER':([6,9,12,15,18,19,20,21,],[13,13,13,13,13,13,13,13,]),'PLUS':([11,13,14,16,22,23,25,26,27,28,29,],[18,-12,-13,18,18,18,18,18,18,18,-11,]),'MINUS':([11,13,14,16,22,23,25,26,27,28,29,],[19,-12,-13,19,19,19,19,19,19,19,-11,]),'TIMES':([11,13,14,16,22,23,25,26,27,28,29,],[20,-12,-13,20,20,20,20,20,20,20,-11,]),'DIVIDE':([11,13,14,16,22,23,25,26,27,28,29,],[21,-12,-13,21,21,21,21,21,21,21,-11,]),')':([13,14,22,25,26,27,28,29,],[-12,-13,29,-7,-8,-9,-10,-11,]),'STRING':([17,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,2,],[1,7,]),'statement':([0,2,],[2,2,]),'expression':([6,9,12,15,18,19,20,21,],[11,16,22,23,25,26,27,28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> statement','statement_list',1,'p_statement_list','plycompiler.py',77),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','plycompiler.py',78),
  ('statement -> INT IDENTIFIER EQUALS expression','statement',4,'p_statement_decl','plycompiler.py',82),
  ('statement -> STR IDENTIFIER EQUALS STRING','statement',4,'p_statement_decl','plycompiler.py',83),
  ('statement -> IDENTIFIER EQUALS expression','statement',3,'p_statement_assign','plycompiler.py',91),
  ('statement -> PRINT expression','statement',2,'p_statement_print','plycompiler.py',99),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','plycompiler.py',104),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','plycompiler.py',105),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','plycompiler.py',106),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','plycompiler.py',107),
  ('expression -> ( expression )','expression',3,'p_expression_group','plycompiler.py',119),
  ('expression -> NUMBER','expression',1,'p_expression_number','plycompiler.py',124),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','plycompiler.py',129),
]
